{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " --master yarn --deploy-mode client                                         --num-executors 10 --executor-memory 64g  --executor-cores 8 --driver-memory 140g --conf spark.dynamicAllocation.maxExecutors=2000 --jars /usr/hdp/current/hive_warehouse_connector/hive-warehouse-connector-assembly-1.0.0.3.1.4.39-6.jar  --py-files /usr/hdp/current/hive_warehouse_connector/pyspark_hwc-1.0.0.3.1.4.39-6.zip --conf spark.hadoop.metastore.catalog.default=hive pyspark-shell\n",
      "Welcome to\n",
      "      ____              __\n",
      "     / __/__  ___ _____/ /__\n",
      "    _\\ \\/ _ \\/ _ `/ __/  '_/\n",
      "   /__ / .__/\\_,_/_/ /_/\\_\\   version 2.3.2.3.1.4.39-6\n",
      "      /_/\n",
      "\n",
      "Using Python version 3.6.8 (default, Dec 30 2018 01:22:34)\n",
      "SparkSession available as 'spark'.\n"
     ]
    }
   ],
   "source": [
    "#########################################  Setup the Environment Variables  #############################\n",
    "import os\n",
    "import re \n",
    "import sys\n",
    "spark_home = os.environ.get('SPARK_HOME', None)\n",
    "if not spark_home:\n",
    "    raise ValueError('SPARK_HOME environment variable is not set')\n",
    "if not os.path.isdir(spark_home):\n",
    "    raise ValueError('SPARK_HOME environment variable is not a directory')\n",
    "if not os.path.isdir(os.path.join(spark_home, 'python')):\n",
    "    raise ValueError('SPARK_HOME directory does not contain python')\n",
    "sys.path.insert(0, os.path.join(spark_home, 'python'))\n",
    "pylib_list = (item for item in os.listdir(os.path.join(spark_home, 'python/lib/'))\n",
    "              if re.match(r'py4j-\\d+(\\.\\d+)+-src\\.zip\\Z', item)\n",
    "              )\n",
    "try:\n",
    "    py4j_file = max(pylib_list)\n",
    "    py4j = os.path.join(spark_home, os.path.join('python/lib', py4j_file))\n",
    "except ValueError:\n",
    "    raise ValueError(\n",
    "        'Could not find py4j'\n",
    "    )\n",
    "sys.path.insert(0, py4j)\n",
    "\n",
    "spark_release_file = spark_home + \"/RELEASE\"\n",
    "if os.path.exists(spark_release_file) and \"Spark\" in  open(spark_release_file).read():\n",
    "    pyspark_submit_args = os.environ.get(\"PYSPARK_SUBMIT_ARGS\", \" --master yarn --deploy-mode client\\\n",
    "                                         --num-executors 10 --executor-memory 64g  --executor-cores 8 --driver-memory 140g --conf spark.dynamicAllocation.maxExecutors=2000 --jars /usr/hdp/current/hive_warehouse_connector/hive-warehouse-connector-assembly-1.0.0.3.1.4.39-6.jar  --py-files /usr/hdp/current/hive_warehouse_connector/pyspark_hwc-1.0.0.3.1.4.39-6.zip --conf spark.hadoop.metastore.catalog.default=hive\"\n",
    "                                        )\n",
    "    if not \"pyspark-shell\" in pyspark_submit_args: pyspark_submit_args += \" pyspark-shell\"\n",
    "    os.environ[\"PYSPARK_SUBMIT_ARGS\"] = pyspark_submit_args\n",
    "    print(pyspark_submit_args)\n",
    "with open(os.path.join(spark_home, 'python/pyspark/shell.py')) as f:\n",
    "    code = compile(f.read(), os.path.join(spark_home, 'python/pyspark/shell.py'), 'exec')\n",
    "    exec(code)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyspark.sql.functions import udf, col, lit, array\n",
    "import pyspark.sql.functions as F\n",
    "from pyspark.sql import Row\n",
    "from pyspark.sql.types import StructType, StructField, IntegerType, StringType, DateType, FloatType\n",
    "\n",
    "from pyspark_llap.sql.session import HiveWarehouseSession\n",
    "from pyspark.sql import SparkSession\n",
    "hive = HiveWarehouseSession.session(spark).build()\n",
    "\n",
    "\n",
    "import time\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import datetime\n",
    "import math\n",
    "import scipy\n",
    "import matplotlib.pyplot as plt\n",
    "import statsmodels.api as sm\n",
    "import statsmodels.formula.api as smf\n",
    "import statsmodels\n",
    "import subprocess\n",
    "import sys\n",
    "import pyspark.sql as SQL\n",
    "from pyspark.sql.functions import concat_ws\n",
    "from pyspark.sql.functions import avg\n",
    "from pyspark import SparkConf\n",
    "from pyspark.sql import HiveContext\n",
    "from pyspark import SparkContext\n",
    "from pyspark.sql.functions import col,row_number\n",
    "from pyspark.sql.types import *\n",
    "from pyspark import SparkContext, SparkConf\n",
    "from pyspark.sql import SQLContext\n",
    "from pyspark.sql import SparkSession\n",
    "from pyspark.sql.functions import col, udf\n",
    "import pyspark.sql.functions as F\n",
    "from pyspark.sql.window import Window\n",
    "from pyspark.sql.types import Row\n",
    "from pyspark.sql.functions import to_timestamp,unix_timestamp,from_unixtime\n",
    "from pyspark.sql.types import DoubleType, FloatType, BooleanType, LongType, IntegerType, TimestampType, StringType, StructType, StructField, ArrayType\n",
    "\n",
    "sqlContext.setConf(\"spark.sql.shuffle.partitions\", \"2500\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# BDD for MY20\n",
    "# READ BDD SIGNALS\n",
    "signal = spark.sql('''select * from fnol.bddExp20_1 union all select * from fnol.bddExp20_2 union all select * from fnol.bddExp20_3 union all select * from fnol.bddExp20_4 union all select * from fnol.bddExp20_5 union all select * from fnol.exp_20_speed''')\\\n",
    "  .select(['vin','epoch','signal_name','signal_value'])\\\n",
    "  .withColumn('epoch_new', F.round('epoch',1))\\\n",
    "  .withColumn('datetime',to_timestamp(from_unixtime(col('epoch_new')), 'yyyy-MM-dd HH:mm:ss'))\\\n",
    "  .groupBy('vin','epoch_new','datetime')\\\n",
    "  .pivot('signal_name')\\\n",
    "  .agg(avg('signal_value'))\\\n",
    "  .orderBy(['epoch_new'], ascending=[1])\\\n",
    "  .withColumn('min_odo', F.min('ODOMETERMASTERVALUE').over(Window.partitionBy('vin')))\\\n",
    "  .withColumn(\"ODOMETERMASTERVALUE\", F.last('ODOMETERMASTERVALUE', True).over(Window.partitionBy('vin').orderBy('epoch_new').rowsBetween(-sys.maxsize, 0)))\\\n",
    "  .withColumn('ODOMETERMASTERVALUE', F.coalesce('ODOMETERMASTERVALUE', 'min_odo'))\\\n",
    "  .withColumn('label',((col('ODOMETERMASTERVALUE')-col('min_odo'))/100).cast('integer'))\\"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# BDD for MY18-19\n",
    "# READ BDD SIGNALS\n",
    "signal2 = spark.sql('''select * from fnol.bddExp18_10 union all select * from fnol.bddExp18_20 union all select * from fnol.bddExp19_10 union all select * from fnol.bddExp19_20 union all select * from fnol.exp_1819 ''')\\\n",
    "  .select(['vin','epoch','signal_name','signal_value'])\\\n",
    "  .withColumn('epoch_new', F.round('epoch',1))\\\n",
    "  .withColumn('datetime',to_timestamp(from_unixtime(col('epoch_new')), 'yyyy-MM-dd HH:mm:ss'))\\\n",
    "  .groupBy('vin','epoch_new','datetime')\\\n",
    "  .pivot('signal_name')\\\n",
    "  .agg(avg('signal_value'))\\\n",
    "  .orderBy(['epoch_new'], ascending=[1])\\\n",
    "  .withColumn('min_odo', F.min('ODOMETERMASTERVALUE').over(Window.partitionBy('vin')))\\\n",
    "  .withColumn(\"ODOMETERMASTERVALUE\", F.last('ODOMETERMASTERVALUE', True).over(Window.partitionBy('vin').orderBy('epoch_new').rowsBetween(-sys.maxsize, 0)))\\\n",
    "  .withColumn('ODOMETERMASTERVALUE', F.coalesce('ODOMETERMASTERVALUE', 'min_odo'))\\\n",
    "  .withColumn('label',((col('ODOMETERMASTERVALUE')-col('min_odo'))/100).cast('integer'))\\"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fill Null by the last closest value \n",
    "winFill=Window.partitionBy('vin').orderBy('epoch_new').rowsBetween(-sys.maxsize, 0)\n",
    "filled_HVACAIRFULLOUT_B_RQ=F.last(signal['HVACAIRFULLOUT_B_RQ'],True).over(winFill)\n",
    "filled_APEDPOS_PC_ACTLARB=F.last(signal['APEDPOS_PC_ACTLARB'],True).over(winFill)\n",
    "filled_HVACCMPRLIM_D_STAT=F.last(signal['HVACCMPRLIM_D_STAT'],True).over(winFill)\n",
    "filled_VEH_V_ACTLENG=F.last(signal['VEH_V_ACTLENG'],True).over(winFill)\n",
    "filled_HvacEvap_Te_Actl=F.last(signal['HvacEvap_Te_Actl'],True).over(winFill)\n",
    "filled_HvacEvap_Te_Rq=F.last(signal['HvacEvap_Te_Rq'],True).over(winFill)\n",
    "filled_AirCondFluidHi_P_Actl=F.last(signal['AirCondFluidHi_P_Actl'],True).over(winFill)\n",
    "filled_HvacRec_Pc_Est=F.last(signal['HvacRec_Pc_Est'],True).over(winFill)\n",
    "signal_f = signal.withColumn(\"HVACAIRFULLOUT_B_RQ_f\", filled_HVACAIRFULLOUT_B_RQ)\\\n",
    ".withColumn(\"APEDPOS_PC_ACTLARB_f\", filled_APEDPOS_PC_ACTLARB)\\\n",
    ".withColumn(\"HVACCMPRLIM_D_STAT_f\", filled_HVACCMPRLIM_D_STAT)\\\n",
    ".withColumn(\"VEH_V_ACTLENG_f\", filled_VEH_V_ACTLENG)\\\n",
    ".withColumn(\"HvacEvap_Te_Actl_f\", filled_HvacEvap_Te_Actl)\\\n",
    ".withColumn(\"HvacEvap_Te_Rq_f\", filled_HvacEvap_Te_Rq)\\\n",
    ".withColumn(\"AirCondFluidHi_P_Actl_f\", filled_AirCondFluidHi_P_Actl)\\\n",
    ".withColumn(\"HvacRec_Pc_Est_f\", filled_HvacRec_Pc_Est)\\"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#fill Null by the last closest value for MY18-19 \n",
    "winFill=Window.partitionBy('vin').orderBy('epoch_new').rowsBetween(-sys.maxsize, 0)\n",
    "filled_HVACAIRFULLOUT_B_RQ=F.last(signal2['HVACAIRFULLOUT_B_RQ'],True).over(winFill)\n",
    "filled_APEDPOS_PC_ACTLARB=F.last(signal2['APEDPOS_PC_ACTLARB'],True).over(winFill)\n",
    "filled_VEH_V_ACTLENG=F.last(signal2['VEH_V_ACTLENG'],True).over(winFill)\n",
    "filled_HvacEvap_Te_Actl=F.last(signal2['HvacEvap_Te_Actl'],True).over(winFill)\n",
    "filled_HvacEvap_Te_Rq=F.last(signal2['HvacEvap_Te_Rq'],True).over(winFill)\n",
    "filled_AirCondFluidHi_P_Actl=F.last(signal2['AirCondFluidHi_P_Actl'],True).over(winFill)\n",
    "signal2_f = signal2.withColumn(\"HVACAIRFULLOUT_B_RQ_f\", filled_HVACAIRFULLOUT_B_RQ)\\\n",
    ".withColumn(\"APEDPOS_PC_ACTLARB_f\", filled_APEDPOS_PC_ACTLARB)\\\n",
    ".withColumn(\"VEH_V_ACTLENG_f\", filled_VEH_V_ACTLENG)\\\n",
    ".withColumn(\"HvacEvap_Te_Actl_f\", filled_HvacEvap_Te_Actl)\\\n",
    ".withColumn(\"HvacEvap_Te_Rq_f\", filled_HvacEvap_Te_Rq)\\\n",
    ".withColumn(\"AirCondFluidHi_P_Actl_f\", filled_AirCondFluidHi_P_Actl)\\"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # try to draw plot for signals\n",
    "# temp_histogram = signal_f.select('HvacEvap_Te_Actl_f').rdd.flatMap(lambda x: x).histogram(20)\n",
    "\n",
    "# # Loading the Computed Histogram into a Pandas Dataframe for plotting\n",
    "# pd.DataFrame(\n",
    "#     list(zip(*temp_histogram)), \n",
    "#     columns=['bin', 'frequency']\n",
    "# ).set_index(\n",
    "#     'bin'\n",
    "# ).plot(kind='bar');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # try to draw plot for signals\n",
    "# temp1_histogram = signal_f.select('HvacEvap_Te_Rq_f').rdd.flatMap(lambda x: x).histogram(20)\n",
    "\n",
    "# # Loading the Computed Histogram into a Pandas Dataframe for plotting\n",
    "# pd.DataFrame(\n",
    "#     list(zip(*temp1_histogram)), \n",
    "#     columns=['bin', 'frequency']\n",
    "# ).set_index(\n",
    "#     'bin'\n",
    "# ).plot(kind='bar');"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "signal_ff = signal_f.withColumn(\"APEDPOS_PC_ACTLARB_gt_50\",F.when(col(\"APEDPOS_PC_ACTLARB\")>=50,1).otherwise(0))\\\n",
    "\n",
    "#for MY18-19\n",
    "signal2_ff = signal2_f.withColumn(\"APEDPOS_PC_ACTLARB_gt_50\",F.when(col(\"APEDPOS_PC_ACTLARB\")>=50,1).otherwise(0))\\"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "signal_f3 = signal_ff.withColumn(\"HVACAIRFULLOUT_B_RQ_f_down\",F.lag(col(\"HVACAIRFULLOUT_B_RQ_f\"),1).over(Window.partitionBy('vin').orderBy('epoch_new')))\\\n",
    "                   .withColumn(\"APEDPOS_PC_ACTLARB_gt_50_down\",F.lag(col(\"APEDPOS_PC_ACTLARB_gt_50\"),1).over(Window.partitionBy('vin').orderBy('epoch_new')))\\\n",
    "\n",
    "#for MY18-19\n",
    "signal2_f3 = signal2_ff.withColumn(\"HVACAIRFULLOUT_B_RQ_f_down\",F.lag(col(\"HVACAIRFULLOUT_B_RQ_f\"),1).over(Window.partitionBy('vin').orderBy('epoch_new')))\\\n",
    "                   .withColumn(\"APEDPOS_PC_ACTLARB_gt_50_down\",F.lag(col(\"APEDPOS_PC_ACTLARB_gt_50\"),1).over(Window.partitionBy('vin').orderBy('epoch_new')))\\"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "signal_f4 = signal_f3.withColumn(\"flag_HVACAIRFULLOUT_B_RQ_f\", F.when((F.col(\"HVACAIRFULLOUT_B_RQ_f_down\")==0) & (F.col(\"HVACAIRFULLOUT_B_RQ_f\")==1),1).otherwise(0))\\\n",
    "                      .withColumn(\"flag_APEDPOS_PC_ACTLARB_gt_50\", F.when((F.col(\"APEDPOS_PC_ACTLARB_gt_50_down\")==0) & (F.col(\"APEDPOS_PC_ACTLARB_gt_50\")==1),1).otherwise(0))\\\n",
    "\n",
    "#for MY18-19\n",
    "signal2_f4 = signal2_f3.withColumn(\"flag_HVACAIRFULLOUT_B_RQ_f\", F.when((F.col(\"HVACAIRFULLOUT_B_RQ_f_down\")==0) & (F.col(\"HVACAIRFULLOUT_B_RQ_f\")==1),1).otherwise(0))\\\n",
    "                      .withColumn(\"flag_APEDPOS_PC_ACTLARB_gt_50\", F.when((F.col(\"APEDPOS_PC_ACTLARB_gt_50_down\")==0) & (F.col(\"APEDPOS_PC_ACTLARB_gt_50\")==1),1).otherwise(0))\\"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# BDD for MY20\n",
    "# READ BDD SIGNALS\n",
    "signal_for1 = signal_f4.where(col('vin').isin('1FMSK8DH2LGA20811'))\n",
    "# '1FMSK8DH3LGA20588'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1318899"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "signal_for1.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "signal_for1.toPandas().to_csv('data_for_VIN_1FMSK8DH2LGA20811.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "signal_for2 = signal_f4.where(col('vin').isin('1FMSK8DH3LGA20588'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "signal_for2.toPandas().to_csv('data_for_VIN_1FMSK8DH3LGA20588.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "w_before = Window.partitionBy('vin').orderBy(F.asc('epoch_new')).rangeBetween(-30,0)\n",
    "w_after = Window.partitionBy('vin').orderBy(F.asc('epoch_new')).rangeBetween(0,30)\n",
    "\n",
    "w_rec_before = Window.partitionBy('vin').orderBy(F.asc('epoch_new'))\n",
    "w_rec_after = Window.partitionBy('vin').orderBy(F.desc('epoch_new'))\n",
    "\n",
    "\n",
    "signal_HVACAIRFULLOUT_banda = signal_f4.withColumn('avg_HVACEVAP_TE_ACTL_b30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.avg(col('HvacEvap_Te_Actl_f')).over(w_before)).otherwise(None))\\\n",
    ".withColumn('avg_HvacEvap_Te_Actl_a30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.avg(col('HvacEvap_Te_Actl_f')).over(w_after)).otherwise(None))\\\n",
    ".withColumn('avg_HVACEVAP_Te_Rq_b30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.avg(col('HvacEvap_Te_Rq_f')).over(w_before)).otherwise(None))\\\n",
    ".withColumn('avg_HvacEvap_Te_Rq_a30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.avg(col('HvacEvap_Te_Rq_f')).over(w_after)).otherwise(None))\\\n",
    ".withColumn('diff_avg_HvacEvap_Te_Actl_Rq_a30',F.round(col('avg_HvacEvap_Te_Actl_a30')-col('avg_HvacEvap_Te_Rq_a30'),2))\\\n",
    ".withColumn('diff_avg_HvacEvap_Te_Actl_Rq_b30',F.round(col('avg_HvacEvap_Te_Actl_b30')-col('avg_HvacEvap_Te_Rq_b30'),2))\\\n",
    ".withColumn('diff_avg_HvacEvap_Te_Actl_Rq',F.round(col('diff_avg_HvacEvap_Te_Actl_Rq_a30')-col('diff_avg_HvacEvap_Te_Actl_Rq_b30'),2))\\\n",
    ".withColumn('diff_avg_HvacEvap_Te_Actl',F.round(col('avg_HvacEvap_Te_Actl_a30')-col('avg_HvacEvap_Te_Actl_b30'),2))\\\n",
    ".withColumn('min_HVACEVAP_TE_ACTL_b30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.min(col('HvacEvap_Te_Actl_f')).over(w_before)).otherwise(None))\\\n",
    ".withColumn('min_HvacEvap_Te_Actl_a30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.min(col('HvacEvap_Te_Actl_f')).over(w_after)).otherwise(None))\\\n",
    ".withColumn('min_HVACEVAP_Te_Rq_b30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.min(col('HvacEvap_Te_Rq_f')).over(w_before)).otherwise(None))\\\n",
    ".withColumn('min_HvacEvap_Te_Rq_a30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.min(col('HvacEvap_Te_Rq_f')).over(w_after)).otherwise(None))\\\n",
    ".withColumn('diff_min_HvacEvap_Te_Actl_Rq_a30',F.round(col('min_HvacEvap_Te_Actl_a30')-col('min_HvacEvap_Te_Rq_a30'),2))\\\n",
    ".withColumn('diff_min_HvacEvap_Te_Actl_Rq_b30',F.round(col('min_HvacEvap_Te_Actl_b30')-col('min_HvacEvap_Te_Rq_b30'),2))\\\n",
    ".withColumn('diff_min_HvacEvap_Te_Actl_Rq',F.round(col('diff_min_HvacEvap_Te_Actl_Rq_a30')-col('diff_min_HvacEvap_Te_Actl_Rq_b30'),2))\\\n",
    ".withColumn('diff_min_HvacEvap_Te_Actl',F.round(col('min_HvacEvap_Te_Actl_a30')-col('min_HvacEvap_Te_Actl_b30'),2))\\\n",
    ".withColumn('max_HVACEVAP_TE_ACTL_b30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.max(col('HvacEvap_Te_Actl_f')).over(w_before)).otherwise(None))\\\n",
    ".withColumn('max_HvacEvap_Te_Actl_a30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.max(col('HvacEvap_Te_Actl_f')).over(w_after)).otherwise(None))\\\n",
    ".withColumn('max_HVACEVAP_Te_Rq_b30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.max(col('HvacEvap_Te_Rq_f')).over(w_before)).otherwise(None))\\\n",
    ".withColumn('max_HvacEvap_Te_Rq_a30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.max(col('HvacEvap_Te_Rq_f')).over(w_after)).otherwise(None))\\\n",
    ".withColumn('diff_max_HvacEvap_Te_Actl_Rq_a30',F.round(col('max_HvacEvap_Te_Actl_a30')-col('max_HvacEvap_Te_Rq_a30'),2))\\\n",
    ".withColumn('diff_max_HvacEvap_Te_Actl_Rq_b30',F.round(col('max_HvacEvap_Te_Actl_b30')-col('max_HvacEvap_Te_Rq_b30'),2))\\\n",
    ".withColumn('diff_max_HvacEvap_Te_Actl_Rq',F.round(col('diff_max_HvacEvap_Te_Actl_Rq_a30')-col('diff_max_HvacEvap_Te_Actl_Rq_b30'),2))\\\n",
    ".withColumn('diff_max_avg_HvacEvap_Te_Actl_Rq',F.round(col('diff_max_HvacEvap_Te_Actl_Rq_a30')-col('diff_avg_HvacEvap_Te_Actl_Rq_b30'),2))\\\n",
    ".withColumn('diff_max_HvacEvap_Te_Actl',F.round(col('max_HvacEvap_Te_Actl_a30')-col('max_HvacEvap_Te_Actl_b30'),2))\\\n",
    ".withColumn('avg_AIRCONDFLUIDHI_P_ACTL_a30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.avg(col('AirCondFluidHi_P_Actl_f')).over(w_after)).otherwise(None))\\\n",
    ".withColumn('avg_AirCondFluidHi_P_Actl_b30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.avg(col('AirCondFluidHi_P_Actl_f')).over(w_before)).otherwise(None))\\\n",
    ".withColumn('diff_AirCondFluidHi_P_Actl',F.round(col('avg_AirCondFluidHi_P_Actl_a30')-col('avg_AirCondFluidHi_P_Actl_b30'),2))\\\n",
    ".withColumn('last_HvacRec_Pc_Est', F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.last(col('HvacRec_Pc_Est_f'),True).over(w_rec_after)).otherwise(None))\\\n",
    ".withColumn('next_HvacRec_Pc_Est', F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.last(col('HvacRec_Pc_Est_f'),True).over(w_rec_before)).otherwise(None))\\\n",
    ".withColumn('diff_HvacRec_Pc_Est',F.round(col('next_HvacRec_Pc_Est')-col('last_HvacRec_Pc_Est'),2))\\"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# for MY18-19\n",
    "\n",
    "w_before = Window.partitionBy('vin').orderBy(F.asc('epoch_new')).rangeBetween(-30,0)\n",
    "w_after = Window.partitionBy('vin').orderBy(F.asc('epoch_new')).rangeBetween(0,30)\n",
    "\n",
    "w_rec_before = Window.partitionBy('vin').orderBy(F.asc('epoch_new'))\n",
    "w_rec_after = Window.partitionBy('vin').orderBy(F.desc('epoch_new'))\n",
    "\n",
    "\n",
    "signal2_HVACAIRFULLOUT_banda = signal2_f4.withColumn('avg_HVACEVAP_TE_ACTL_b30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.avg(col('HvacEvap_Te_Actl_f')).over(w_before)).otherwise(None))\\\n",
    ".withColumn('avg_HvacEvap_Te_Actl_a30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.avg(col('HvacEvap_Te_Actl_f')).over(w_after)).otherwise(None))\\\n",
    ".withColumn('avg_HVACEVAP_Te_Rq_b30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.avg(col('HvacEvap_Te_Rq_f')).over(w_before)).otherwise(None))\\\n",
    ".withColumn('avg_HvacEvap_Te_Rq_a30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.avg(col('HvacEvap_Te_Rq_f')).over(w_after)).otherwise(None))\\\n",
    ".withColumn('diff_avg_HvacEvap_Te_Actl_Rq_a30',F.round(col('avg_HvacEvap_Te_Actl_a30')-col('avg_HvacEvap_Te_Rq_a30'),2))\\\n",
    ".withColumn('diff_avg_HvacEvap_Te_Actl_Rq_b30',F.round(col('avg_HvacEvap_Te_Actl_b30')-col('avg_HvacEvap_Te_Rq_b30'),2))\\\n",
    ".withColumn('diff_avg_HvacEvap_Te_Actl_Rq',F.round(col('diff_avg_HvacEvap_Te_Actl_Rq_a30')-col('diff_avg_HvacEvap_Te_Actl_Rq_b30'),2))\\\n",
    ".withColumn('diff_avg_HvacEvap_Te_Actl',F.round(col('avg_HvacEvap_Te_Actl_a30')-col('avg_HvacEvap_Te_Actl_b30'),2))\\\n",
    ".withColumn('min_HVACEVAP_TE_ACTL_b30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.min(col('HvacEvap_Te_Actl_f')).over(w_before)).otherwise(None))\\\n",
    ".withColumn('min_HvacEvap_Te_Actl_a30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.min(col('HvacEvap_Te_Actl_f')).over(w_after)).otherwise(None))\\\n",
    ".withColumn('min_HVACEVAP_Te_Rq_b30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.min(col('HvacEvap_Te_Rq_f')).over(w_before)).otherwise(None))\\\n",
    ".withColumn('min_HvacEvap_Te_Rq_a30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.min(col('HvacEvap_Te_Rq_f')).over(w_after)).otherwise(None))\\\n",
    ".withColumn('diff_min_HvacEvap_Te_Actl_Rq_a30',F.round(col('min_HvacEvap_Te_Actl_a30')-col('min_HvacEvap_Te_Rq_a30'),2))\\\n",
    ".withColumn('diff_min_HvacEvap_Te_Actl_Rq_b30',F.round(col('min_HvacEvap_Te_Actl_b30')-col('min_HvacEvap_Te_Rq_b30'),2))\\\n",
    ".withColumn('diff_min_HvacEvap_Te_Actl_Rq',F.round(col('diff_min_HvacEvap_Te_Actl_Rq_a30')-col('diff_min_HvacEvap_Te_Actl_Rq_b30'),2))\\\n",
    ".withColumn('diff_min_HvacEvap_Te_Actl',F.round(col('min_HvacEvap_Te_Actl_a30')-col('min_HvacEvap_Te_Actl_b30'),2))\\\n",
    ".withColumn('max_HVACEVAP_TE_ACTL_b30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.max(col('HvacEvap_Te_Actl_f')).over(w_before)).otherwise(None))\\\n",
    ".withColumn('max_HvacEvap_Te_Actl_a30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.max(col('HvacEvap_Te_Actl_f')).over(w_after)).otherwise(None))\\\n",
    ".withColumn('max_HVACEVAP_Te_Rq_b30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.max(col('HvacEvap_Te_Rq_f')).over(w_before)).otherwise(None))\\\n",
    ".withColumn('max_HvacEvap_Te_Rq_a30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.max(col('HvacEvap_Te_Rq_f')).over(w_after)).otherwise(None))\\\n",
    ".withColumn('diff_max_HvacEvap_Te_Actl_Rq_a30',F.round(col('max_HvacEvap_Te_Actl_a30')-col('max_HvacEvap_Te_Rq_a30'),2))\\\n",
    ".withColumn('diff_max_HvacEvap_Te_Actl_Rq_b30',F.round(col('max_HvacEvap_Te_Actl_b30')-col('max_HvacEvap_Te_Rq_b30'),2))\\\n",
    ".withColumn('diff_max_HvacEvap_Te_Actl_Rq',F.round(col('diff_max_HvacEvap_Te_Actl_Rq_a30')-col('diff_max_HvacEvap_Te_Actl_Rq_b30'),2))\\\n",
    ".withColumn('diff_max_avg_HvacEvap_Te_Actl_Rq',F.round(col('diff_max_HvacEvap_Te_Actl_Rq_a30')-col('diff_avg_HvacEvap_Te_Actl_Rq_b30'),2))\\\n",
    ".withColumn('diff_max_HvacEvap_Te_Actl',F.round(col('max_HvacEvap_Te_Actl_a30')-col('max_HvacEvap_Te_Actl_b30'),2))\\\n",
    ".withColumn('avg_AIRCONDFLUIDHI_P_ACTL_a30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.avg(col('AirCondFluidHi_P_Actl_f')).over(w_after)).otherwise(None))\\\n",
    ".withColumn('avg_AirCondFluidHi_P_Actl_b30',F.when(col(\"flag_HVACAIRFULLOUT_B_RQ_f\")==1,F.avg(col('AirCondFluidHi_P_Actl_f')).over(w_before)).otherwise(None))\\\n",
    ".withColumn('diff_AirCondFluidHi_P_Actl',F.round(col('avg_AirCondFluidHi_P_Actl_a30')-col('avg_AirCondFluidHi_P_Actl_b30'),2))\\"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "s1=signal_HVACAIRFULLOUT_banda.where(col(\"diff_max_avg_HvacEvap_Te_Actl_Rq\")<=-5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# s1.show(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#signal_ApedPos_banda.take(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "#result = signal_ApedPos_banda.filter(col('avg_HVACEVAP_TE_ACTL_a30').isNotNull())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "#signal_ApedPos_banda.filter(col('avg_HVACEVAP_TE_ACTL_a30').isNotNull()).show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "variable = 'diff_max_avg_HvacEvap_Te_Actl_Rq'\n",
    "#variable = 'diff_HVACEVAP_TE_ACTL'\n",
    "#variable = 'diff_AIRCONDFLUIDHI_P_ACTL'\n",
    "\n",
    "bins=[]\n",
    "bins = list(np.arange(-10,10,0.5))\n",
    "#bins.insert(0,-float(\"inf\"))\n",
    "bins.append(float(\"inf\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_20_test = signal_HVACAIRFULLOUT_banda.where(col(variable).isNotNull())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "136"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp_20_test.count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_20_test.toPandas().to_csv('temp_MY2020_test.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_20 = signal_HVACAIRFULLOUT_banda.select(variable).where(col(variable).isNotNull())\n",
    "bins , counts_20 = temp_20.rdd.flatMap(lambda x: x).histogram(bins)\n",
    "sum_counts_20 = float(sum(counts_20))\n",
    "counts_20_2 = list(map(lambda x: float(x)/sum_counts_20, counts_20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_1819 = signal2_HVACAIRFULLOUT_banda.select(variable).where(col(variable).isNotNull())\n",
    "bins, counts_1819  = temp_1819.rdd.flatMap(lambda x: x).histogram(bins)\n",
    "sum_counts_1819 = float(sum(counts_1819))\n",
    "counts_1819_2 = list(map(lambda x: float(x)/sum_counts_1819, counts_1819))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-10.0, -9.5, -9.0, -8.5, -8.0, -7.5, -7.0, -6.5, -6.0, -5.5, -5.0, -4.5, -4.0, -3.5, -3.0, -2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, inf]\n",
      "[1, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 3, 6, 25, 27, 19, 7, 7, 4, 8, 4, 1, 1, 4, 2, 3, 0, 2, 2, 0, 2, 0, 0]\n",
      "134.0\n",
      "[0.007462686567164179, 0.0, 0.007462686567164179, 0.0, 0.007462686567164179, 0.0, 0.0, 0.0, 0.0, 0.007462686567164179, 0.007462686567164179, 0.0, 0.0, 0.0, 0.0, 0.007462686567164179, 0.0, 0.007462686567164179, 0.022388059701492536, 0.04477611940298507, 0.1865671641791045, 0.20149253731343283, 0.1417910447761194, 0.05223880597014925, 0.05223880597014925, 0.029850746268656716, 0.05970149253731343, 0.029850746268656716, 0.007462686567164179, 0.007462686567164179, 0.029850746268656716, 0.014925373134328358, 0.022388059701492536, 0.0, 0.014925373134328358, 0.014925373134328358, 0.0, 0.014925373134328358, 0.0, 0.0]\n"
     ]
    }
   ],
   "source": [
    "print(bins)\n",
    "print(counts_20)\n",
    "print(sum_counts_20)\n",
    "print(counts_20_2)\n",
    "bins_2=bins[:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,5))\n",
    "plt.hist(bins_2,  bins=bins_2,alpha=0.5, weights=np.array(counts_20_2), label=\"2020 MY\", color=\"red\")\n",
    "plt.hist(bins_2,  bins=bins_2,alpha=0.5, weights=np.array(counts_1819_2), label=\"2018-2019 MY\", color=\"skyblue\")\n",
    "plt.rc('font', size=14)          \n",
    "plt.rc('axes', titlesize=14)\n",
    "plt.rc('axes', labelsize=14)    # fontsize of the x and y labels\n",
    "plt.rc('xtick', labelsize=14)    # fontsize of the tick labels\n",
    "plt.rc('ytick', labelsize=14)    # fontsize of the tick labels\n",
    "plt.rc('legend', fontsize=14)    # legend fontsize\n",
    "plt.rc('figure', titlesize=10)\n",
    "plt.legend(loc='upper right')\n",
    "plt.title('Gap between max and avg real air and required temperature in 30s after & before trigger')\n",
    "plt.ylabel('% of Count')\n",
    "plt.xlabel('Temp (C)')\n",
    "plt.xlim([-8,8])\n",
    "plt.ylim([0, 0.3])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "variable = 'diff_min_HvacEvap_Te_Actl'\n",
    "#variable = 'diff_HVACEVAP_TE_ACTL'\n",
    "#variable = 'diff_AIRCONDFLUIDHI_P_ACTL'\n",
    "\n",
    "bins=[]\n",
    "bins = list(np.arange(-10,10,0.5))\n",
    "#bins.insert(0,-float(\"inf\"))\n",
    "bins.append(float(\"inf\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_20 = signal_HVACAIRFULLOUT_banda.select(variable).where(col(variable).isNotNull())\n",
    "bins, counts_20  = temp_20.rdd.flatMap(lambda x: x).histogram(bins)\n",
    "sum_counts_20 = float(sum(counts_20))\n",
    "counts_20_2 = list(map(lambda x: float(x)/sum_counts_20, counts_20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_1819 = signal2_HVACAIRFULLOUT_banda.select(variable).where(col(variable).isNotNull())\n",
    "bins, counts_1819  = temp_1819.rdd.flatMap(lambda x: x).histogram(bins)\n",
    "sum_counts_1819 = float(sum(counts_1819))\n",
    "counts_1819_2 = list(map(lambda x: float(x)/sum_counts_1819, counts_1819))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-10.0, -9.5, -9.0, -8.5, -8.0, -7.5, -7.0, -6.5, -6.0, -5.5, -5.0, -4.5, -4.0, -3.5, -3.0, -2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, inf]\n",
      "[0.0, 0.0, 0.007407407407407408, 0.007407407407407408, 0.0, 0.0, 0.0, 0.007407407407407408, 0.0, 0.0, 0.0, 0.0, 0.007407407407407408, 0.014814814814814815, 0.0, 0.0, 0.05925925925925926, 0.014814814814814815, 0.07407407407407407, 0.2518518518518518, 0.2814814814814815, 0.07407407407407407, 0.05925925925925926, 0.037037037037037035, 0.014814814814814815, 0.007407407407407408, 0.022222222222222223, 0.037037037037037035, 0.0, 0.0, 0.007407407407407408, 0.007407407407407408, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007407407407407408, 0.0, 0.0]\n"
     ]
    }
   ],
   "source": [
    "print(bins)\n",
    "print(counts_20_2)\n",
    "bins_2=bins[:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,5))\n",
    "plt.hist(bins_2, bins=bins_2,alpha=0.5, weights=np.array(counts_20_2), label=\"2020 MY\", color=\"red\")\n",
    "plt.hist(bins_2, bins=bins_2,alpha=0.5, weights=np.array(counts_1819_2), label=\"2018-2019 MY\", color=\"skyblue\")\n",
    "plt.rc('font', size=14)          \n",
    "plt.rc('axes', titlesize=14)\n",
    "plt.rc('axes', labelsize=14)    # fontsize of the x and y labels\n",
    "plt.rc('xtick', labelsize=14)    # fontsize of the tick labels\n",
    "plt.rc('ytick', labelsize=14)    # fontsize of the tick labels\n",
    "plt.rc('legend', fontsize=14)    # legend fontsize\n",
    "plt.rc('figure', titlesize=10)\n",
    "plt.legend(loc='upper right')\n",
    "plt.title('Gap between Min real air temperature in 30s after & before trigger')\n",
    "plt.ylabel('% of Count')\n",
    "plt.xlabel('Temp (C)')\n",
    "plt.xlim([-4,4])\n",
    "plt.ylim([0, 0.5])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "variable = 'diff_max_HvacEvap_Te_Actl'\n",
    "#variable = 'diff_HVACEVAP_TE_ACTL'\n",
    "#variable = 'diff_AIRCONDFLUIDHI_P_ACTL'\n",
    "\n",
    "bins=[]\n",
    "bins = list(np.arange(-10,10,0.5))\n",
    "#bins.insert(0,-float(\"inf\"))\n",
    "bins.append(float(\"inf\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_20 = signal_HVACAIRFULLOUT_banda.select(variable).where(col(variable).isNotNull())\n",
    "bins, counts_20  = temp_20.rdd.flatMap(lambda x: x).histogram(bins)\n",
    "sum_counts_20 = float(sum(counts_20))\n",
    "counts_20_2 = list(map(lambda x: float(x)/sum_counts_20, counts_20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_1819 = signal2_HVACAIRFULLOUT_banda.select(variable).where(col(variable).isNotNull())\n",
    "bins, counts_1819  = temp_1819.rdd.flatMap(lambda x: x).histogram(bins)\n",
    "sum_counts_1819 = float(sum(counts_1819))\n",
    "counts_1819_2 = list(map(lambda x: float(x)/sum_counts_1819, counts_1819))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-10.0, -9.5, -9.0, -8.5, -8.0, -7.5, -7.0, -6.5, -6.0, -5.5, -5.0, -4.5, -4.0, -3.5, -3.0, -2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, inf]\n",
      "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.015151515151515152, 0.015151515151515152, 0.0, 0.0, 0.015151515151515152, 0.0, 0.03787878787878788, 0.007575757575757576, 0.015151515151515152, 0.022727272727272728, 0.030303030303030304, 0.05303030303030303, 0.09090909090909091, 0.24242424242424243, 0.1893939393939394, 0.09848484848484848, 0.045454545454545456, 0.022727272727272728, 0.045454545454545456, 0.0, 0.007575757575757576, 0.022727272727272728, 0.007575757575757576, 0.0, 0.007575757575757576, 0.0, 0.0, 0.0, 0.0, 0.007575757575757576, 0.0, 0.0, 0.0]\n"
     ]
    }
   ],
   "source": [
    "print(bins)\n",
    "print(counts_20_2)\n",
    "bins_2=bins[:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,5))\n",
    "plt.hist(bins_2, bins=bins_2,alpha=0.5, weights=np.array(counts_20_2), label=\"2020 MY\", color=\"red\")\n",
    "plt.hist(bins_2, bins=bins_2,alpha=0.5, weights=np.array(counts_1819_2), label=\"2018-2019 MY\", color=\"skyblue\")\n",
    "plt.rc('font', size=14)          \n",
    "plt.rc('axes', titlesize=14)\n",
    "plt.rc('axes', labelsize=14)    # fontsize of the x and y labels\n",
    "plt.rc('xtick', labelsize=14)    # fontsize of the tick labels\n",
    "plt.rc('ytick', labelsize=14)    # fontsize of the tick labels\n",
    "plt.rc('legend', fontsize=14)    # legend fontsize\n",
    "plt.rc('figure', titlesize=10)\n",
    "plt.legend(loc='upper right')\n",
    "plt.title('Gap between Max real air temperature in 30s after & before trigger')\n",
    "plt.ylabel('% of Count')\n",
    "plt.xlabel('Temp (C)')\n",
    "plt.xlim([-4,4])\n",
    "plt.ylim([0, 0.5])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "variable = 'diff_avg_HvacEvap_Te_Actl_Rq'\n",
    "#variable = 'diff_HVACEVAP_TE_ACTL'\n",
    "#variable = 'diff_AIRCONDFLUIDHI_P_ACTL'\n",
    "\n",
    "bins=[]\n",
    "bins = list(np.arange(-10,10,0.5))\n",
    "#bins.insert(0,-float(\"inf\"))\n",
    "bins.append(float(\"inf\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_20 = signal_HVACAIRFULLOUT_banda.select(variable).where(col(variable).isNotNull())\n",
    "bins, counts_20  = temp_20.rdd.flatMap(lambda x: x).histogram(bins)\n",
    "sum_counts_20 = float(sum(counts_20))\n",
    "counts_20_2 = list(map(lambda x: float(x)/sum_counts_20, counts_20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_1819 = signal2_HVACAIRFULLOUT_banda.select(variable).where(col(variable).isNotNull())\n",
    "bins, counts_1819  = temp_1819.rdd.flatMap(lambda x: x).histogram(bins)\n",
    "sum_counts_1819 = float(sum(counts_1819))\n",
    "counts_1819_2 = list(map(lambda x: float(x)/sum_counts_1819, counts_1819))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-10.0, -9.5, -9.0, -8.5, -8.0, -7.5, -7.0, -6.5, -6.0, -5.5, -5.0, -4.5, -4.0, -3.5, -3.0, -2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, inf]\n",
      "[0.0, 0.007633587786259542, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007633587786259542, 0.0, 0.007633587786259542, 0.007633587786259542, 0.015267175572519083, 0.007633587786259542, 0.007633587786259542, 0.03816793893129771, 0.030534351145038167, 0.0916030534351145, 0.16030534351145037, 0.33587786259541985, 0.11450381679389313, 0.05343511450381679, 0.030534351145038167, 0.007633587786259542, 0.015267175572519083, 0.015267175572519083, 0.007633587786259542, 0.015267175572519083, 0.007633587786259542, 0.0, 0.0, 0.007633587786259542, 0.007633587786259542, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n"
     ]
    }
   ],
   "source": [
    "print(bins)\n",
    "print(counts_20_2)\n",
    "bins_2=bins[:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,5))\n",
    "plt.hist(bins_2, bins=bins_2,alpha=0.5, weights=np.array(counts_20_2), label=\"2020 MY\", color=\"red\")\n",
    "plt.hist(bins_2, bins=bins_2,alpha=0.5, weights=np.array(counts_1819_2), label=\"2018-2019 MY\", color=\"skyblue\")\n",
    "plt.rc('font', size=14)          \n",
    "plt.rc('axes', titlesize=14)\n",
    "plt.rc('axes', labelsize=14)    # fontsize of the x and y labels\n",
    "plt.rc('xtick', labelsize=14)    # fontsize of the tick labels\n",
    "plt.rc('ytick', labelsize=14)    # fontsize of the tick labels\n",
    "plt.rc('legend', fontsize=14)    # legend fontsize\n",
    "plt.rc('figure', titlesize=10)\n",
    "plt.legend(loc='upper right')\n",
    "plt.title('Gap between avgerage real and request air temperature in 30s after & before trigger')\n",
    "plt.ylabel('% of Count')\n",
    "plt.xlabel('Temp (C)')\n",
    "plt.xlim([-4,4])\n",
    "plt.ylim([0, 0.5])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "variable = 'diff_min_HvacEvap_Te_Actl_Rq'\n",
    "#variable = 'diff_HVACEVAP_TE_ACTL'\n",
    "#variable = 'diff_AIRCONDFLUIDHI_P_ACTL'\n",
    "\n",
    "bins=[]\n",
    "bins = list(np.arange(-10,10,0.5))\n",
    "#bins.insert(0,-float(\"inf\"))\n",
    "bins.append(float(\"inf\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_20 = signal_HVACAIRFULLOUT_banda.select(variable).where(col(variable).isNotNull())\n",
    "bins, counts_20  = temp_20.rdd.flatMap(lambda x: x).histogram(bins)\n",
    "sum_counts_20 = float(sum(counts_20))\n",
    "counts_20_2 = list(map(lambda x: float(x)/sum_counts_20, counts_20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_1819 = signal2_HVACAIRFULLOUT_banda.select(variable).where(col(variable).isNotNull())\n",
    "bins, counts_1819  = temp_1819.rdd.flatMap(lambda x: x).histogram(bins)\n",
    "sum_counts_1819 = float(sum(counts_1819))\n",
    "counts_1819_2 = list(map(lambda x: float(x)/sum_counts_1819, counts_1819))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-10.0, -9.5, -9.0, -8.5, -8.0, -7.5, -7.0, -6.5, -6.0, -5.5, -5.0, -4.5, -4.0, -3.5, -3.0, -2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, inf]\n",
      "[0.007407407407407408, 0.0, 0.007407407407407408, 0.0, 0.014814814814814815, 0.0, 0.0, 0.014814814814814815, 0.007407407407407408, 0.0, 0.0, 0.0, 0.007407407407407408, 0.0, 0.02962962962962963, 0.037037037037037035, 0.037037037037037035, 0.02962962962962963, 0.08148148148148149, 0.26666666666666666, 0.25925925925925924, 0.06666666666666667, 0.02962962962962963, 0.022222222222222223, 0.02962962962962963, 0.007407407407407408, 0.014814814814814815, 0.014814814814814815, 0.0, 0.0, 0.0, 0.0, 0.007407407407407408, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007407407407407408]\n"
     ]
    }
   ],
   "source": [
    "print(bins)\n",
    "print(counts_20_2)\n",
    "bins_2=bins[:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,5))\n",
    "plt.hist(bins_2, bins=bins_2,alpha=0.5, weights=np.array(counts_20_2), label=\"2020 MY\", color=\"red\")\n",
    "plt.hist(bins_2, bins=bins_2,alpha=0.5, weights=np.array(counts_1819_2), label=\"2018-2019 MY\", color=\"skyblue\")\n",
    "plt.rc('font', size=14)          \n",
    "plt.rc('axes', titlesize=14)\n",
    "plt.rc('axes', labelsize=14)    # fontsize of the x and y labels\n",
    "plt.rc('xtick', labelsize=14)    # fontsize of the tick labels\n",
    "plt.rc('ytick', labelsize=14)    # fontsize of the tick labels\n",
    "plt.rc('legend', fontsize=14)    # legend fontsize\n",
    "plt.rc('figure', titlesize=10)\n",
    "plt.legend(loc='upper right')\n",
    "plt.title('Gap between Min real and request air temperature in 30s after & before trigger')\n",
    "plt.ylabel('% of Count')\n",
    "plt.xlabel('Temp (C)')\n",
    "plt.xlim([-4,4])\n",
    "plt.ylim([0, 0.5])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "variable = 'diff_max_HvacEvap_Te_Actl_Rq'\n",
    "#variable = 'diff_HVACEVAP_TE_ACTL'\n",
    "#variable = 'diff_AIRCONDFLUIDHI_P_ACTL'\n",
    "\n",
    "bins=[]\n",
    "bins = list(np.arange(-10,10,0.5))\n",
    "#bins.insert(0,-float(\"inf\"))\n",
    "bins.append(float(\"inf\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_20 = signal_HVACAIRFULLOUT_banda.select(variable).where(col(variable).isNotNull())\n",
    "bins, counts_20  = temp_20.rdd.flatMap(lambda x: x).histogram(bins)\n",
    "sum_counts_20 = float(sum(counts_20))\n",
    "counts_20_2 = list(map(lambda x: float(x)/sum_counts_20, counts_20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_1819 = signal2_HVACAIRFULLOUT_banda.select(variable).where(col(variable).isNotNull())\n",
    "bins, counts_1819  = temp_1819.rdd.flatMap(lambda x: x).histogram(bins)\n",
    "sum_counts_1819 = float(sum(counts_1819))\n",
    "counts_1819_2 = list(map(lambda x: float(x)/sum_counts_1819, counts_1819))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-10.0, -9.5, -9.0, -8.5, -8.0, -7.5, -7.0, -6.5, -6.0, -5.5, -5.0, -4.5, -4.0, -3.5, -3.0, -2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, inf]\n",
      "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.015151515151515152, 0.015151515151515152, 0.0, 0.0, 0.015151515151515152, 0.0, 0.03787878787878788, 0.007575757575757576, 0.015151515151515152, 0.015151515151515152, 0.03787878787878788, 0.05303030303030303, 0.09090909090909091, 0.24242424242424243, 0.20454545454545456, 0.09090909090909091, 0.05303030303030303, 0.015151515151515152, 0.03787878787878788, 0.0, 0.007575757575757576, 0.022727272727272728, 0.007575757575757576, 0.0, 0.007575757575757576, 0.0, 0.0, 0.0, 0.0, 0.007575757575757576, 0.0, 0.0, 0.0]\n"
     ]
    }
   ],
   "source": [
    "print(bins)\n",
    "print(counts_20_2)\n",
    "bins_2=bins[:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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6tUUFxez884707hxY8ys0CFJwm3dupVPP/2UlStX0rZt2+2eX94fTC8iIlKTff755+y88840adJEiZtUiXr16tGuXTu+/vrrqplflcxFRESklti8eTONGzcudBhSy+ywww58++23VTIvJW8iIiIpVOMmVa0qjyklbyIiIiIJouRNREREJEF0t6mIiEguxoyp0cu78cYbefLJJ3nvvfdo1KgRPXv25MYbb6Rbt26lZdyd6667jnvvvZcvv/ySww8/nDvvvJP9998fgMWLF3P99dczffp0li1bRocOHTjttNO49tpry7QDXLp0KZdccgnTpk2jcePGnHHGGYwdO5aGDRtWGF/nzp1ZsmQJEydO5Kyzzioz7vDDD2fu3LnccsstjBo1iqOPPpqmTZvy/PNl++QfP348w4cP54033mDPPfes1PapTVTzJiIiUgvMmDGDYcOGMXv2bKZNm0aDBg3o378/q1atKi1z8803c+utt3LHHXfw2muv0bZtWwYMGMCaNWsAePfdd9myZQt33303b7/9NnfccQcTJ05k+PDhpfPYsmULJ5xwAmvWrGHmzJk8/PDDPP7441x++eVZY9x111257777ygxbsGABCxYsYKeddgLCnZkTJkxg1qxZjBs3rrTc0qVLGTVqFLfddludTtxAT1gQEREp45133qFr167lR9TwmrdUa9eupWXLljz99NMMHjwYd6djx45ceumlXHXVVQCsX7+etm3bMnbsWC6++OK087nrrru45ppr+OKLLwCYPHkyJ5xwAkuWLGHXXXcF4MEHH+SCCy7g888/p0WLFmnn07lzZ37yk59w++2389///pc99tgDgJEjR7Jq1SpefvllLr30Uq644gog1LKNHDmSN998k912240BAwbQqFEjnnvuue3aLoVU4bFF5Z6woJo3ERGRWmjNmjVs3bqV1q1bA7Bo0SKWL1/OwIEDS8s0btyYvn37Mnv27Arns3r16tJ5AMyZM4euXbuWJm4AgwYNYuPGjcyfPz9jTG3atGHw4MHcf//9AGzatIkHH3yQ888/v1zZ888/n379+nHuuedy55138vrrrzN+/PjcVr6WU/ImIiJSCw0fPpyDDjqIXr16AbB8+XIA2rVrV6Zcu3btSselWrJkCWPHjmXYsGGlw5YvX15uHm3atKF+/foVzifuvPPO44EHHmDr1q0888wztGrVir59+6YtO27cOBYsWMDw4cO5++67ad++fdb51wVK3kRERGqZUaNGMWvWLJ544gnq16+/TfMoLi7muOOOY8CAAYwcObLKYhs0aBDuztSpUxk/fjznnXdehWXbtWvHxRdfzN57780pp5xSZTEknZI3ERGRWmTkyJE8/PDDTJs2rbRdGVBaa1VcXFymfHFxcbkareXLl3P00UfTrVs3Jk2aVKaD2fbt25ebx8qVK9myZUtONWP16tXjnHPO4YYbbmDatGmcc845Gcs3aNCABg3UOUackjcREZFaYvjw4aWJW5cuXcqM23333Wnfvj1Tp04tHbZhwwZmzpxJ7969S4ctW7aMfv360bVrVx5++OFyiVOvXr145513+OSTT0qHTZ06lUaNGnHIIYfkFOd5553HzJkzGTBgAB07dtyWVa3TlMqKiIjUApdccgmTJk3i6aefpnXr1qXtz5o1a0azZs0wM0aMGMENN9xAly5d2Gefffjtb39Ls2bNOOOMMwD47LPP6NevHx07duT2229n5cqVpfMvKiqifv36DBw4kP3335+zzz6bW2+9lS+++ILRo0dz4YUXVninaao99tiDlStX6hmy20jJm4iISC1w1113AXDssceWGf7rX/+aMVG3I1deeSXr16/nkksuKe2kd8qUKTRv3hyAKVOm8MEHH/DBBx/QqVOnMvNZtGgRnTt3pn79+jz33HMMGzaMI444gsaNG3PmmWdyyy23VCre733ve9u4pqJ+3kRERGIy9cUlsj3Uz5uIiIhIHaTkTURERCRBlLyJiIiIJIiSNxEREZEEUfImIiIikiBK3kREREQSRMmbiIiISIIoeRMRERFJECVvIiIiIgmi5E1EREQkQZS8iYiI5GDmsnV5fVXWjTfeyKGHHkqLFi0oKipi8ODBLFiwoEwZd2fMmDF07NiRxo0b069fP95+++0yZX73u99xxBFH0LRpU8ws7bJee+01+vfvT6tWrWjVqhXHHnssc+fOzRjfk08+ycCBAykqKqJ58+YcfvjhPPPMM+XKPfHEE+y33340atSI/fbbj6eeeqrcfAYNGkRRURFmxowZM8rNY+HChZx44okUFRXRokULTj31VIqLizPGN2bMGMys3LNhAe6++27MjG7dugHwl7/8hWbNmvHRRx+VKVdcXExRURG///3vMy5reyl5ExERqQVmzJjBsGHDmD17NtOmTaNBgwb079+fVatWlZa5+eabufXWW7njjjt47bXXaNu2LQMGDGDNmjWlZTZu3MhJJ53EiBEj0i5n7dq1HHfccXTs2JF//etfzJkzhw4dOjBo0KAy80n18ssvc8wxx/Dcc8/xn//8h+OPP54TTzyRmTNnlpaZM2cOp512GmeeeSavv/46Z555JqeccgqvvvpqaZl169bRu3dvbrvttrTLWbduHQMHDsTdmTZtGq+88gqbNm1i8ODBbN26NeM2bN++PbNmzWLx4sVlho8fP55OnTqVvr/gggs4+uijGTJkSJl5XnzxxXTp0oXRo0dnXM720oPpRUREYip6ePi21IZtjz4dmm7X9GvXrqVly5Y8/fTTDB48GHenY8eOXHrppVx11VUArF+/nrZt2zJ27FguvvjiMtM//vjjnHLKKaTmCfPmzePQQw/lo48+Yvfddwdg0aJF7LHHHrz22mv06JHTs9UBOOyww+jTpw+33norAKeddhqrVq1i6tSppWX69+9PUVERDz/8cJlpV65cSVFREdOnT6dfv36lw6dMmcJxxx3HF198QevWrQH4+uuvad26NVOmTKF///5pYxkzZgyPP/44++yzDwcccADXXXcdAG+++Sa9e/fm4osv5oUXXiitzSwuLqZbt2788pe/5PLLL2fSpEkMGzaMN954gz322CPtMvRgehEREanQmjVr2Lp1a2kCs2jRIpYvX87AgQNLyzRu3Ji+ffsye/bsnOe77777UlRUxPjx49m4cSMbN25k3LhxdOrUif3337/SMZbEB6HmLR4fwKBBgyoV38aNGzEzdtxxx9JhO+64I/Xq1WPWrFlZpz///PN54IEHSmvUxo8fz6mnnkrz5s3LlGvXrh1//vOfufrqq3nxxRe57LLLuO222ypM3KqSkjcREZFaaPjw4Rx00EH06tULgOXLlwMh6Yhr165d6bhcNG/enBkzZvC3v/2NJk2a0KRJEx599FGmTp1K48aNc57PnXfeySeffMJZZ51VOmz58uXbHV/Pnj1p1qwZo0ePZt26daxbt44rrriCLVu2sGzZsqzTH3fccWzevJmXXnqJjRs38uCDD3LeeeelLXvSSSdxyimnMGjQII444gguvPDCnOPcHkreREREaplRo0Yxa9YsnnjiCerXr1+l816/fj3nnXcePXv25F//+hevvPIK3bt353//939Zty5cWm7WrFnpa+jQoeXm8cQTTzB69GgeeughdttttyqNr6ioiMcee4zJkyfTvHlzWrZsyVdffcXBBx9MvXrZ05769etzzjnncN999/H0009TVFTEkUceWWH5a6+9lq1bt3L11VdX5Wpk1CBvSxIREZFqN3LkSB555BGmT59e5hJe+/btgdBWK974vri4uHRcLh566CEWLlzIK6+8UpoYPvTQQ7Ru3ZqnnnqKn/70p7z++uul5Vu0aFFm+scff5yzzz6biRMnMnjw4DLj2rdvX+6u0MrGBzBw4EAWLlzIypUradCgAf+zpZ8AAB3hSURBVK1ataJ9+/Y5X9I899xzOfDAA1m8eDHnnntuxrINGjQo8zcfVPMmIiJSSwwfPpyHH36YadOm0aVLlzLjdt99d9q3b1/mZoANGzYwc+ZMevfunfMyvvnmG8ysTC1WvXr1MLPSdmJ77bVX6att27al5f72t79x1llnMWHCBE4++eRy8+7Vq1eZ+ACmTp1aqfji2rRpQ6tWrZg2bRqff/45P/zhD3Oabu+99+awww5j3rx5nHPOOdu07OqkmjcREZFa4JJLLmHSpEk8/fTTtG7durSdWMnlSzNjxIgR3HDDDXTp0oV99tmH3/72tzRr1owzzjijdD5Lly5l1apVpd1llNSi7bXXXjRr1owBAwYwevRohg0bxmWXXcbWrVu56aabqF+/Psccc0yF8T3yyCOcddZZjB07lr59+5bG17BhQ773ve8BIfns27cvN910Ez/60Y946qmnmD59epkbDVatWsXSpUv56quvAPjwww9La9ZKaujuv/9+unTpQtu2bZkzZw7Dhw9n5MiR7Lvvvjlvz8mTJ7Nx48YyN1TUFKp5ExERqQXuuusu1qxZw7HHHkuHDh1KX2PHji0tc+WVVzJy5EguueQSevTowbJly5gyZUqZOymvvfZaunfvXtpXWffu3enevTsl3W916dKFZ599lrfeeotevXpx5JFH8sknnzB58mR22WWXCuO75557+PbbbxkxYkSZ+E466aTSMr179+aRRx5hwoQJHHjggUycOJFHH32Uww8/vLTMM888Q/fu3Tn66KMBuPDCC+nevTv33HNPaZn33nuPE088ka5du/Kb3/yGq666qsx2yEWTJk1qZOIG6udNRESkjEx9cYlsD/XzJiIiIlIHKXkT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\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,5))\n",
    "plt.hist(bins_2, bins=bins_2,alpha=0.5, weights=np.array(counts_20_2), label=\"2020 MY\", color=\"red\")\n",
    "plt.hist(bins_2, bins=bins_2,alpha=0.5, weights=np.array(counts_1819_2), label=\"2018-2019 MY\", color=\"skyblue\")\n",
    "plt.rc('font', size=14)          \n",
    "plt.rc('axes', titlesize=14)\n",
    "plt.rc('axes', labelsize=14)    # fontsize of the x and y labels\n",
    "plt.rc('xtick', labelsize=14)    # fontsize of the tick labels\n",
    "plt.rc('ytick', labelsize=14)    # fontsize of the tick labels\n",
    "plt.rc('legend', fontsize=14)    # legend fontsize\n",
    "plt.rc('figure', titlesize=10)\n",
    "plt.legend(loc='upper right')\n",
    "plt.title('Gap between Max real and request air temperature in 30s after & before trigger')\n",
    "plt.ylabel('% of Count')\n",
    "plt.xlabel('Temp (C)')\n",
    "plt.xlim([-4,4])\n",
    "plt.ylim([0, 0.5])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "variable = 'diff_AirCondFluidHi_P_Actl'\n",
    "#variable = 'diff_HVACEVAP_TE_ACTL'\n",
    "#variable = 'diff_AIRCONDFLUIDHI_P_ACTL'\n",
    "\n",
    "bins=[]\n",
    "bins = list(np.arange(-10,10,0.5))\n",
    "#bins.insert(0,-float(\"inf\"))\n",
    "bins.append(float(\"inf\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_20 = signal_HVACAIRFULLOUT_banda.select(variable).where(col(variable).isNotNull())\n",
    "bins, counts_20  = temp_20.rdd.flatMap(lambda x: x).histogram(bins)\n",
    "sum_counts_20 = float(sum(counts_20))\n",
    "counts_20_2 = list(map(lambda x: float(x)/sum_counts_20, counts_20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_1819 = signal2_HVACAIRFULLOUT_banda.select(variable).where(col(variable).isNotNull())\n",
    "bins, counts_1819  = temp_1819.rdd.flatMap(lambda x: x).histogram(bins)\n",
    "sum_counts_1819 = float(sum(counts_1819))\n",
    "counts_1819_2 = list(map(lambda x: float(x)/sum_counts_1819, counts_1819))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-10.0, -9.5, -9.0, -8.5, -8.0, -7.5, -7.0, -6.5, -6.0, -5.5, -5.0, -4.5, -4.0, -3.5, -3.0, -2.5, -2.0, -1.5, -1.0, -0.5, 0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5, 8.0, 8.5, 9.0, 9.5, inf]\n",
      "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.007352941176470588, 0.014705882352941176, 0.029411764705882353, 0.03676470588235294, 0.08088235294117647, 0.17647058823529413, 0.3382352941176471, 0.23529411764705882, 0.03676470588235294, 0.014705882352941176, 0.007352941176470588, 0.007352941176470588, 0.014705882352941176, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n"
     ]
    }
   ],
   "source": [
    "print(bins)\n",
    "print(counts_20_2)\n",
    "bins_2=bins[:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,5))\n",
    "plt.hist(bins_2, bins=bins_2,alpha=0.5, weights=np.array(counts_20_2), label=\"2020 MY\", color=\"red\")\n",
    "plt.hist(bins_2, bins=bins_2,alpha=0.5, weights=np.array(counts_1819_2), label=\"2018-2019 MY\", color=\"skyblue\")\n",
    "plt.rc('font', size=14)          \n",
    "plt.rc('axes', titlesize=14)\n",
    "plt.rc('axes', labelsize=14)    # fontsize of the x and y labels\n",
    "plt.rc('xtick', labelsize=14)    # fontsize of the tick labels\n",
    "plt.rc('ytick', labelsize=14)    # fontsize of the tick labels\n",
    "plt.rc('legend', fontsize=14)    # legend fontsize\n",
    "plt.rc('figure', titlesize=10)\n",
    "plt.legend(loc='upper right')\n",
    "plt.title('Gap between nearest AC pressure 30s after & before trigger')\n",
    "plt.ylabel('% of Count')\n",
    "plt.xlabel('Temp (C)')\n",
    "plt.xlim([-4,4])\n",
    "plt.ylim([0, 0.5])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "variable = 'diff_HvacRec_Pc_Est'\n",
    "#variable = 'diff_HVACEVAP_TE_ACTL'\n",
    "#variable = 'diff_AIRCONDFLUIDHI_P_ACTL'\n",
    "\n",
    "bins=[]\n",
    "bins = list(np.arange(-100,100,10))\n",
    "#bins.insert(0,-float(\"inf\"))\n",
    "bins.append(float(\"inf\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_20 = signal_HVACAIRFULLOUT_banda.select(variable).where(col(variable).isNotNull())\n",
    "bins, counts_20  = temp_20.rdd.flatMap(lambda x: x).histogram(bins)\n",
    "sum_counts_20 = float(sum(counts_20))\n",
    "counts_20_2 = list(map(lambda x: float(x)/sum_counts_20, counts_20))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-100, -90, -80, -70, -60, -50, -40, -30, -20, -10, 0, 10, 20, 30, 40, 50, 60, 70, 80, 90, inf]\n",
      "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]\n"
     ]
    }
   ],
   "source": [
    "print(bins)\n",
    "print(counts_20_2)\n",
    "bins_2=bins[:-1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(10,5))\n",
    "plt.hist(bins_2, bins=bins_2,alpha=0.5, weights=np.array(counts_20_2), label=\"2020 MY\", color=\"red\")\n",
    "#plt.hist(bins_2, bins=bins_2,alpha=0.5, weights=np.array(counts_1819_2), label=\"2018-2019 MY\", color=\"skyblue\")\n",
    "plt.rc('font', size=14)          \n",
    "plt.rc('axes', titlesize=14)\n",
    "plt.rc('axes', labelsize=14)    # fontsize of the x and y labels\n",
    "plt.rc('xtick', labelsize=14)    # fontsize of the tick labels\n",
    "plt.rc('ytick', labelsize=14)    # fontsize of the tick labels\n",
    "plt.rc('legend', fontsize=14)    # legend fontsize\n",
    "plt.rc('figure', titlesize=10)\n",
    "plt.legend(loc='upper right')\n",
    "plt.title('Gap between Recirc position 30s after & before trigger')\n",
    "plt.ylabel('% of Count')\n",
    "plt.xlabel('Temp (C)')\n",
    "plt.xlim([-100,100])\n",
    "plt.ylim([0, 1])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}